Whatever Happened To PaaS (Platform-as-a-Service)  Why do people still spin up and set up their own AWS and Compute Engine instances  Why have App Engine and Heroku and Elastic Beanstalk not conquered all  Is fine-grained control really that important  I suspect the reason is three-pronged: cost, lock-in, and culture. App Engine s prices drop regularly, but they re voluminous and confusing, and a single instance   a pretty puny virtual machine   costs more than a dollar day, not counting storage or bandwidth. Same for Heroku. You get more bang-per-buck by simply buying and running your own servers. You also get enormously larger headaches, and significantly slower development time; but that tradeoff isn t worth it for many. Then there s lock-in. Once you build your app atop App Engine s custom APIs, you re committed; there s no easy way to back away and go to another provider. The lock-in is less for other PaaS providers, but it s still there. There is no universal PaaS equivalent of de facto IaaS (infrastructure-as-a-service) standards such as OpenStack or Docker. The third, least valid, and arguably most powerful reason is culture. Companies don t want to give up perceived control over their systems even if that control is never worth its associated complexity and sysadmins, understandably, don t want to evolve themselves out of a job. The thing about all three of those reasons not to go PaaS, however, is that they re temporary. Costs keep dropping. Culture keeps changing. And there are signs of slow movement towards interchangeable PaaS services and standards. (You could argue that Docker itself is a stride in that direction.) In the early days of electricity, factories all had their own generators; then, eventually, they moved to the grid. IaaS is the equivalent of every individual company getting their raw electrical power from the grid   but stepping it down with their own transformers and converting from three-phase to one-phase in-house. I suspect we re still en route towards a largely PaaS world where server code mostly just runs, without developers knowing or caring about the servers in question. It s just happening a little slower than I d like.